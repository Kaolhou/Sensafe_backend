generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                      @id @default(uuid())
  email                  String                      @unique
  password               String
  firstName              String
  lastName               String
  recordType             UserRecordType
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  devices                Device[]
  phoneNumber            String?
  relationshipsAsParent  ParentPatientRelationship[] @relation("ParentUser")
  relationshipsAsPatient ParentPatientRelationship[] @relation("PatientUser")

  preferences            UserPreferences?
  sessions               UserSession[]
}

model ParentPatientRelationship {
  parentId   String
  patientId  String
  assignedAt DateTime @default(now())
  parent     User     @relation("ParentUser", fields: [parentId], references: [id], onDelete: Cascade)
  patient    User     @relation("PatientUser", fields: [patientId], references: [id], onDelete: Cascade)

  @@id([parentId, patientId])
}

model Device {
  id           String        @id @default(cuid())
  name         String?
  serialNumber String
  status       String?
  patientId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  patient      User          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  geolocations Geolocation[]
}

model Geolocation {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  deviceId  String
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
}

model UserSession {
  id        String   @id @default(cuid()) 
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) 
}

model UserPreferences {
  id                    String    @id @default(uuid())
  userId                String    @unique

  fontSize              Int?
  batterySaverLevel     Int?      
  theme                 String?   // Example: 'light', 'dark', 'system'
  language              String?   // Example: 'en', 'pt-BR'
  notificationsEnabled  Boolean   @default(true)
  // Add other preference fields as needed
  // e.g., dataSaverMode Boolean @default(false)
  // e.g., mapType String? // 'roadmap', 'satellite'

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relation back to the User model
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional index, though @unique already creates one
  // @@index([userId])
}


enum UserRecordType {
  PARENT
  PATIENT
}
